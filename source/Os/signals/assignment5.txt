#PGDAC AUG17
#Machine no. 19
#Roll no. 7 and 71
#Assignment5

Q1.
Scipt

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid: %d \n",getpid());

pid=fork();
if(pid==0){
sleep(5);
kill(getppid(),SIGUSR1);
}else{
signal(SIGUSR1,handler1);
for(i=1;i<=1000;i++)
{
sleep(1);
printf("%d \n",i);
}
}
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",i);
}

Q2.a SIGINT
Script

nclude<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid= %d \n",getpid());
signal(SIGINT,handler1);
pause();
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",sigid);
}

Q2.b SIGTERM
Script

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid= %d \n",getpid());
signal(SIGTERM,handler1);
pause();
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",sigid);
}

Q2.c SIGQUIT
Script

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid= %d \n",getpid());
signal(SIGQUIT,handler1);
pause();
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",sigid);
}

Q2.d SIGSTOP
Script

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid= %d \n",getpid());
signal(SIGSTOP,handler1);
pause();
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",sigid);
}

Q2.e SIGKILL
Script

#include<stdio.h>
#include<unistd.h>
#include<signal.h>

void handler1(int);
int i;
int main()
{
int pid;
printf("pid= %d \n",getpid());
signal(SIGKILL,handler1);
pause();
return 0;
}
void handler1(int sigid)
{
printf("signal received. \n value of i is %d",sigid);
}

